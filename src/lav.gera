mod obem::lav

use std::(math, iter, arr, str)
use obem::lam

pub proc add(a, b) {
    val r = [0.0; math::min(length(a), length(b))]
    0..length(r) |> iter::for_each(|i| {
        r[i] = a[i] + b[i]
    })
    return r
}

pub proc sub(a, b) {
    val r = [0.0; math::min(length(a), length(b))]
    0..length(r) |> iter::for_each(|i| {
        r[i] = a[i] - b[i]
    })
    return r
}

pub proc mul(a, b) {
    val r = [0.0; math::min(length(a), length(b))]
    0..length(r) |> iter::for_each(|i| {
        r[i] = a[i] * b[i]
    })
    return r
}

pub proc div(a, b) {
    val r = [0.0; math::min(length(a), length(b))]
    0..length(r) |> iter::for_each(|i| {
        r[i] = a[i] / b[i]
    })
    return r
}

pub proc neg(v) {
    val r = [0.0; length(v)]
    0..length(r) |> iter::for_each(|i| {
        r[i] = -v[i]
    })
    return r
}

pub proc scale(v, f) {
    val r = v |> arr::clone()
    0..length(r) |> iter::for_each(|i| {
        r[i] = r[i] * f
    })
    return r
}

pub proc len(v) {
    return v
        |> arr::iter()
        |> iter::reduce(|s, n| s + math::pow(n, 2.0), 0.0)
        |> math::sqrt()
}

pub proc dot(a, b) {
    case length(a) != length(b) -> "Vectors must have the same length, \
but got vectors of lengths _ and _ instead!"
        |> str::fmt([length(a) |> core::as_str(), length(b) |> core::as_str()])
        |> panic()
    return 0..length(a)
        |> iter::map(|i| a[i] * b[i])
        |> iter::reduce(|s, n| s + n, 0.0)
}

pub proc cross(a, b) {
    case length(a) != 3 || length(b) != 3 -> "Vectors must have a length of 3, \
but got vectors of lengths _ and _ instead!"
        |> str::fmt([length(a) |> core::as_str(), length(b) |> core::as_str()])
        |> panic()
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ]
}

pub proc norm(v) {
    val l = v |> len()
    case l == 0.0 -> return v
    return v |> scale(1.0 / l)
}

pub proc transform(v, m) {
    case length(v) != m.width -> {
        "Vector element and matrix column count must match, \
but got a vector with _ elements and a _x_ matrix!"
            |> str::fmt([
                v |> length() |> core::as_str(),
                m.height |> core::as_str(), m.width |> core::as_str()
            ])
            |> panic()
    }
    val r = v |> arr::clone()
    0..m.width |> iter::for_each(|column_idx| {
        r[column_idx] = dot(v, m |> lam::column(column_idx))
    })
    return r
}

pub proc x(v) { return v[0] }
pub proc y(v) { return v[1] }
pub proc z(v) { return v[2] }
pub proc w(v) { return v[3] }

pub proc swizzle(v, components) {
    return components
        |> str::iter()
        |> iter::map(|c| {
            case c {
                "x" -> return v[0]
                "y" -> return v[1]
                "z" -> return v[2]
                "w" -> return v[3]
            }
            return "'_' is not a valid component!"
                |> str::fmt([c])
                |> panic()
        })
        |> arr::collect()
}

pub proc clone(v) {
    return v |> arr::clone()
}

pub proc as_str(v) {
    return "[_]"
        |> str::fmt([
            v |> arr::iter()
                |> iter::map(|e| core::as_str(e))
                |> str::join(", ")
        ])
}