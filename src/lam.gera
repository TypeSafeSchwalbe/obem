mod obem::lam

use std::(arr, iter, math, str)
use obem::lav

proc new(values, height, width) {
    return {
        values = values,
        height = height,
        width = width
    }
}

proc new_empty(height, width) {
    return {
        values = [0.0; height * width],
        height = height,
        width = width
    }
}

pub proc new2x2(
    m00, m01,
    m10, m11
) {
    return [
        m00, m01,
        m10, m11
    ] |> new(2, 2)
}

pub proc new3x2(
    m00, m01,
    m10, m11,
    m20, m21
) {
    return [
        m00, m01,
        m10, m11,
        m20, m21
    ] |> new(3, 2)
}

pub proc new4x2(
    m00, m01,
    m10, m11,
    m20, m21,
    m30, m31
) {
    return [
        m00, m01,
        m10, m11,
        m20, m21,
        m30, m31
    ] |> new(4, 2)
}

pub proc new2x3(
    m00, m01, m02,
    m10, m11, m12
) {
    return [
        m00, m01, m02,
        m10, m11, m12
    ] |> new(2, 3)
}

pub proc new3x3(
    m00, m01, m02,
    m10, m11, m12,
    m20, m21, m22
) {
    return [
        m00, m01, m02,
        m10, m11, m12,
        m20, m21, m22
    ] |> new(3, 3)
}

pub proc new4x3(
    m00, m01, m02,
    m10, m11, m12,
    m20, m21, m22,
    m30, m31, m32,
) {
    return [
        m00, m01, m02,
        m10, m11, m12,
        m20, m21, m22,
        m30, m31, m32,
    ] |> new(4, 3)
}

pub proc new2x4(
    m00, m01, m02, m03,
    m10, m11, m12, m13
) {
    return [
        m00, m01, m02, m03,
        m10, m11, m12, m13
    ] |> new(2, 4)
}

pub proc new3x4(
    m00, m01, m02, m03,
    m10, m11, m12, m13,
    m20, m21, m22, m23
) {
    return [
        m00, m01, m02, m03,
        m10, m11, m12, m13,
        m20, m21, m22, m23
    ] |> new(3, 4)
}

pub proc new4x4(
    m00, m01, m02, m03,
    m10, m11, m12, m13,
    m20, m21, m22, m23,
    m30, m31, m32, m33
) {
    return [
        m00, m01, m02, m03,
        m10, m11, m12, m13,
        m20, m21, m22, m23,
        m30, m31, m32, m33
    ] |> new(4, 4)
}

pub proc iden2x2() { return new2x2(
    1.0, 0.0,
    0.0, 1.0
) }

pub proc iden3x3() { return new3x3(
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0
) }

pub proc iden4x4() { return new4x4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
) }

pub proc at(m, row_idx, column_idx) {
    case row_idx >= m.height -> "The row index _ is out of bounds \
for a matrix with _ rows!"
        |> str::fmt([row_idx |> core::as_str(), m.height |> core::as_str()])
        |> panic()
    case column_idx >= m.width -> "The column index _ is out of bounds \
for a matrix with _ columns!"
        |> str::fmt([column_idx |> core::as_str(), m.width |> core::as_str()])
        |> panic()
    return u_at(m, row_idx, column_idx)
}

proc u_at(m, row_idx, column_idx) {
    return m.values[m.width * row_idx + column_idx]
}

proc set_at(value, m, row_idx, column_idx) {
    m.values[m.width * row_idx + column_idx] = value
}

pub proc row(m, row_idx) {
    val r = [0.0; m.width]
    0..m.width |> iter::for_each(|column_idx| {
        r[column_idx] = m |> u_at(row_idx, column_idx)
    })
    return r
}

pub proc column(m, column_idx) {
    val start = m.height * column_idx
    return m.values |> arr::subarray(start, start + m.height)
}

proc enforce_same_size(a, b) {
    case a.height == b.height && a.width == b.width -> return unit
    "Sizes of matrices must match, got _x_ and _x_!"
        |> str::fmt([
            a.height |> core::as_str(), a.width |> core::as_str(),
            b.height |> core::as_str(), b.width |> core::as_str()
        ])
        |> panic()
}

pub proc add(a, b) {
    enforce_same_size(a, b)
    val r = new_empty(a.height, a.width)
    0..length(r.values) |> iter::for_each(|i| {
        r.values[i] = a.values[i] + b.values[i]
    })
    return r
}

pub proc sub(a, b) {
    enforce_same_size(a, b)
    val r = new_empty(a.height, a.width)
    0..length(r.values) |> iter::for_each(|i| {
        r.values[i] = a.values[i] - b.values[i]
    })
    return r
}

pub proc mul(a, b) {
    val r_width = math::min(a.width, b.width)
    val r_height = math::min(a.height, b.height)
    val r = new_empty(r_height, r_width)
    0..r_height |> iter::for_each(|row_idx| {
        0..r_width |> iter::for_each(|column_idx| {
            lav::dot(a |> column(column_idx), b |> row(row_idx))
                |> set_at(r, row_idx, column_idx)
        })
    })
    return r
}

pub proc neg(m) {
    val r = new_empty(m.height, m.width)
    0..length(r.values) |> iter::for_each(|i| {
        r.values[i] = -m.values[i]
    })
    return r
}

pub proc scale(m, f) {
    case length(f) != m.height -> {
        "Vector element and matrix row count must match, \
but got a vector with _ elements and a _x_ matrix!"
            |> str::fmt([
                f |> length() |> core::as_str(),
                m.height |> core::as_str(), m.width |> core::as_str()
            ])
            |> panic()
    }
    val r = m |> clone()
    0..m.height |> iter::for_each(|row_idx| {
        0..m.width |> iter::for_each(|column_idx| {
            u_at(m, row_idx, column_idx) * f[row_idx]
                |> set_at(r, row_idx, column_idx)
        })
    })
    return r
}

pub proc rotate_x(m, angle) {
    val sin_a = math::sin(angle)
    val cos_a = math::cos(angle)
    val r = m |> clone()
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 1, column_idx) * cos_a + at(m, 2, column_idx) * sin_a
            |> set_at(r, 1, column_idx)
    })
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 1, column_idx) * (-sin_a) + at(m, 2, column_idx) * cos_a
            |> set_at(r, 2, column_idx)
    })
    return r
}

pub proc rotate_y(m, angle) {
    val sin_a = math::sin(angle)
    val cos_a = math::cos(angle)
    val r = m |> clone()
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 0, column_idx) * cos_a + at(m, 2, column_idx) * (-sin_a)
            |> set_at(r, 0, column_idx)
    })
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 0, column_idx) * sin_a + at(m, 2, column_idx) * cos_a
            |> set_at(r, 2, column_idx)
    })
    return r
}

pub proc rotate_z(m, angle) {
    val sin_a = math::sin(angle)
    val cos_a = math::cos(angle)
    val r = m |> clone()
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 0, column_idx) * cos_a + at(m, 1, column_idx) * sin_a
            |> set_at(r, 0, column_idx)
    })
    0..m.width |> iter::for_each(|column_idx| {
        at(m, 0, column_idx) * (-sin_a) + at(m, 1, column_idx) * cos_a
            |> set_at(r, 1, column_idx)
    })
    return r
}

pub proc translation(d) {
    val size = length(d) + 1
    val m = new_empty(size, size)
    0..size |> iter::for_each(|i| {
        1.0 |> set_at(m, i, i)
    })
    0..length(d) |> iter::for_each(|column_idx| {
        d[column_idx] |> set_at(m, m.height - 1, column_idx)
    })
    return m
}

pub proc ortho(left, right, bottom, top, near_plane, far_plane) {
    val m00 = 2.0 / (right - left)
    val m11 = 2.0 / (top - bottom)
    val m22 = 2.0 / (near_plane - far_plane)
    val m30 = (right + left) / (left - right)
    val m31 = (top + bottom) / (bottom - top)
    val m32 = (far_plane + near_plane) / (near_plane - far_plane)
    return new4x4(
        m00, 0.0, 0.0, 0.0,
        0.0, m11, 0.0, 0.0,
        0.0, 0.0, m22, 0.0,
        m30, m31, m32, 1.0
    )
}

pub proc perspective(fov, aspect_ratio, near_plane, far_plane) {
    val m00 = 1.0 / (math::tan(fov * 0.5) * aspect_ratio)
    val m11 = 1.0 / math::tan(fov * 0.5)
    val m22 = -((far_plane + near_plane) / (far_plane - near_plane))
    val m23 = -((2.0 * far_plane * near_plane) / (far_plane - near_plane))
    return new4x4(
        m00, 0.0,  0.0, 0.0,
        0.0, m11,  0.0, 0.0,
        0.0, 0.0,  m22, m23,
        0.0, 0.0, -1.0, 0.0
    )
}

pub proc look_at(eye, at, up) {
    val foreward = lav::sub(at, eye) |> lav::norm()
    val right = up |> lav::cross(foreward) |> lav::norm()
    val upn = foreward |> lav::cross(right)
    return new4x4(
         right[0],              upn[0],             -foreward[0],             0.0,
         right[1],              upn[1],             -foreward[1],             0.0,
         right[2],              upn[2],             -foreward[2],             0.0,
        -lav::dot(right, eye), -lav::dot(upn, eye),  lav::dot(foreward, eye), 1.0
    )
}

pub proc clone(m) {
    return {
        values = m.values |> arr::clone(),
        height = m.height,
        width = m.width
    }
}

pub proc as_str(m) {
    return 0..m.height |> iter::map(|row_idx| "|_|" |> str::fmt([
        0..m.width |> iter::map(|column_idx|
            m |> u_at(row_idx, column_idx) |> core::as_str()
        ) |> str::join(", ")
    ])) |> str::join("\n")
}