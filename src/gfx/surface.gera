
mod obem::gfx::Surface

use obem::internal::gfx::Surface::*
use obem::gfx::(Shader, Mesh)
use std::(opt, str)

proc create(handle_f) { return {
    handle_v = #none unit,
    handle = |self| {
        case self.handle_v |> opt::is_none()
            -> self.handle_v = #some handle_f()
        return self.handle_v |> opt::expect("should exist")
    },

    width = |self| self .> handle()
        |> internal_surface_width(),
    height = |self| self .> handle()
        |> internal_surface_height(),

    clear_color = |self, color| {
        case length(color) != 4 -> "'color' has _ components, but must have 4!"
            |> str::fmt([color |> length() |> as_str()])
            |> panic()
        self .> handle()
            |> internal_clear_color(color[0], color[1], color[2], color[3])
        return self
    },

    clear_depth = |self, d| {
        self .> handle()
            |> internal_clear_depth(d)
        return self
    },

    draw_mesh = |self, mesh, vertex_property_sizes, shader, depth_test| {
        self .> handle()
            |> internal_draw(
                mesh .> handle(),
                vertex_property_sizes,
                shader .> handle(),
                depth_test
            )
        return self
    },

    draw_rect = |self, pos, size, transform, color| {
        var rect_mesh = static { val = #none unit }
        case rect_mesh.val |> opt::is_none()
            // [1]-----[3]
            //  |   ___/|
            //  | /     |
            // [0]-----[2]
            -> rect_mesh.val = #some Mesh::new([
                0.0, 0.0, // [0] bottom left
                0.0, 1.0, // [1] top left
                1.0, 0.0, // [2] bottom right
                1.0, 1.0  // [3] top right
            ], [0, 3, 1, 0, 2, 3])
        var rect_shader = static { val = #none unit }
        case rect_shader.val |> opt::is_none()
            -> rect_shader.val = #some Shader::new("
                attribute vec2 pos;
                uniform vec2 offset;
                uniform vec2 size;
                uniform mat4 transform;
                void main(void) {
                    gl_Position = transform * vec4(
                        offset + pos * size, 0.0, 1.0
                    );
                }
            ", "
                precision highp float;
                uniform vec4 color;
                void main(void) {
                    gl_FragColor = color;
                }
            ")
        var m = rect_mesh.val |> opt::expect("just enforced")
        var s = rect_shader.val |> opt::expect("just enforced")
        case length(pos) != 2 -> "'pos' has _ components, but must have 2!"
            |> str::fmt([pos |> length() |> as_str()])
            |> panic()
        case length(size) != 2 -> "'size' has _ components, but must have 2!"
            |> str::fmt([size |> length() |> as_str()])
            |> panic()
        case length(color) != 4 -> "'color' has _ components, but must have 4!"
            |> str::fmt([color |> length() |> as_str()])
            |> panic()
        case transform.height != 4 || transform.width != 4
            -> "'transform' is a _x_ matrix, but must be a 4x4 matrix!"
                |> str::fmt([
                    transform.height |> as_str(),
                    transform.width |> as_str()
                ])
                |> panic()
        s .> uniform_vec("offset", pos)
            .> uniform_vec("size", size)
            .> uniform_vec("color", color)
            .> uniform_mat("transform", transform)
        self .> draw_mesh(m, [2], s, false)
        return self
    }
} }

pub proc main() {
    return create(|| internal_main_surface())
}

pub proc new(texture) {
    return create(|| texture .> handle() |> internal_create_surface())
}